// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module ram_16x8(	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  input  [3:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [7:0] R0_data,
  input  [3:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data
);

  reg [7:0] Memory[0:15];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  always @(posedge W0_clk) begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    if (W0_en & 1'h1)	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      Memory[W0_addr] <= W0_data;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    reg [31:0] _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        for (logic [4:0] i = 5'h0; i < 5'h10; i += 5'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
          Memory[i[3:0]] = _RANDOM_MEM[7:0];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        end	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
endmodule

module Queue16_UInt8(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input        clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
               reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
               io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [7:0] io_enq_bits,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input        io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output       io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [7:0] io_deq_bits	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  wire       io_enq_ready;	// src/main/scala/chisel3/util/Decoupled.scala:286:19
  reg  [3:0] enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [3:0] deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg        maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  wire       ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:260:33
  wire       empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :261:{25,28}
  wire       do_enq = io_enq_ready & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :286:19
  assign io_enq_ready = ~(ptr_match & maybe_full);	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :262:24, :286:19
  wire       do_deq = io_deq_ready & ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :261:25, :285:19
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    if (reset) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      enq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    end
    else begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      if (do_enq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        enq_ptr_value <= enq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (do_deq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        deq_ptr_value <= deq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][3:0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][7:4];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][8];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_16x8 ram_ext (	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    .R0_addr (deq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .R0_en   (1'h1),	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_deq_valid = ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :261:25, :285:19
endmodule

module PS2Controller(	// ps2/src/ps2/ps2.scala:44:7
  input        clock,	// ps2/src/ps2/ps2.scala:44:7
               reset,	// ps2/src/ps2/ps2.scala:44:7
               io_ps2_clock_i,	// ps2/src/ps2/ps2.scala:46:14
  output       io_ps2_clock_o,	// ps2/src/ps2/ps2.scala:46:14
               io_ps2_clock_t,	// ps2/src/ps2/ps2.scala:46:14
  input        io_ps2_data_i,	// ps2/src/ps2/ps2.scala:46:14
  output       io_ps2_data_o,	// ps2/src/ps2/ps2.scala:46:14
               io_ps2_data_t,	// ps2/src/ps2/ps2.scala:46:14
               io_req_ready,	// ps2/src/ps2/ps2.scala:46:14
  input        io_req_valid,	// ps2/src/ps2/ps2.scala:46:14
  input  [7:0] io_req_bits,	// ps2/src/ps2/ps2.scala:46:14
  output       io_req_error,	// ps2/src/ps2/ps2.scala:46:14
  input        io_resp_ready,	// ps2/src/ps2/ps2.scala:46:14
  output       io_resp_valid,	// ps2/src/ps2/ps2.scala:46:14
  output [7:0] io_resp_bits,	// ps2/src/ps2/ps2.scala:46:14
  output       io_resp_error	// ps2/src/ps2/ps2.scala:46:14
);

  reg  [3:0]       state;	// ps2/src/ps2/ps2.scala:67:22
  reg  [12:0]      counter100us_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [19:0]      counter15ms_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [16:0]      counter2ms_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [8:0]       curReq;	// ps2/src/ps2/ps2.scala:84:19
  reg  [3:0]       counterSend_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [8:0]       curResp;	// ps2/src/ps2/ps2.scala:87:20
  reg  [3:0]       counterRecv_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [2:0]       lastClockSamples;	// ps2/src/ps2/ps2.scala:91:33
  reg              lastClock;	// ps2/src/ps2/ps2.scala:96:26
  wire             clockRise = (&lastClockSamples) & ~lastClock;	// ps2/src/ps2/ps2.scala:91:33, :93:62, :96:26, :102:{38,41}
  wire             _GEN = state == 4'h0;	// ps2/src/ps2/ps2.scala:67:22, :105:17, src/main/scala/chisel3/util/Counter.scala:61:40
  wire             _GEN_0 = clockRise & ~io_ps2_data_i;	// ps2/src/ps2/ps2.scala:102:38, :108:{22,25}
  wire             _GEN_1 = state == 4'h1;	// ps2/src/ps2/ps2.scala:67:22, :105:17, :119:17
  wire             _GEN_2 = state == 4'h2;	// ps2/src/ps2/ps2.scala:67:22, :105:17, :130:15
  wire             _GEN_3 = state == 4'h3;	// ps2/src/ps2/ps2.scala:67:22, :105:17, :143:15
  wire             _GEN_4 = _GEN | _GEN_1;	// ps2/src/ps2/ps2.scala:74:17, :105:17
  wire [8:0]       _io_ps2_data_o_T = curReq >> counterSend_value;	// ps2/src/ps2/ps2.scala:84:19, :153:30, src/main/scala/chisel3/util/Counter.scala:61:40
  wire             _GEN_5 = state == 4'h4;	// ps2/src/ps2/ps2.scala:67:22, :105:17, :159:17
  wire             _GEN_6 = state == 4'h5;	// ps2/src/ps2/ps2.scala:67:22, :105:17, :170:15
  wire             _GEN_7 = state == 4'h6;	// ps2/src/ps2/ps2.scala:67:22, :105:17, :148:15
  wire             _GEN_8 = state == 4'h7;	// ps2/src/ps2/ps2.scala:67:22, :105:17, :111:15
  wire             _GEN_9 = state == 4'h9;	// ps2/src/ps2/ps2.scala:67:22, :105:17, :197:15
  wire             _GEN_10 =
    _GEN | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8 | state == 4'h8;	// ps2/src/ps2/ps2.scala:67:22, :105:17, src/main/scala/chisel3/util/Counter.scala:73:24, src/main/scala/chisel3/util/Decoupled.scala:67:20
  wire             clockLow = lastClockSamples == 3'h0;	// ps2/src/ps2/ps2.scala:91:33, :94:64
  wire             clockFall = clockLow & lastClock;	// ps2/src/ps2/ps2.scala:94:64, :96:26, :103:37
  wire             wrap = counter100us_value == 13'h1387;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  wire             wrap_1 = counter15ms_value == 20'hB71AF;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  wire             wrap_2 = counterSend_value == 4'h8;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  wire             wrap_3 = counter2ms_value == 17'h1869F;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  wire             wrap_4 = counterRecv_value == 4'h8;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  wire [15:0]      _curResp_T = 16'h1 << counterRecv_value;	// ps2/src/ps2/ps2.scala:188:34, src/main/scala/chisel3/util/Counter.scala:61:40
  wire             _GEN_11 = io_ps2_clock_i & io_req_valid;	// ps2/src/ps2/ps2.scala:84:19, :112:34, :115:28, :118:18
  wire             _GEN_12 = _GEN_8 & clockRise;	// ps2/src/ps2/ps2.scala:87:20, :102:38, :105:17, :187:23, :188:17
  wire             _GEN_13 = _GEN_1 | _GEN_2 | _GEN_3 | _GEN_5 | _GEN_6 | _GEN_7;	// ps2/src/ps2/ps2.scala:87:20, :105:17
  wire [15:0][3:0] _GEN_14 =
    {{state},
     {state},
     {state},
     {state},
     {state},
     {state},
     {4'h0},
     {clockRise ? 4'h9 : state},
     {clockRise & wrap_4 ? 4'h8 : state},
     {4'h0},
     {clockRise ? 4'h0 : state},
     {clockFall ? 4'h5 : state},
     {clockFall ? (wrap_2 ? 4'h4 : state) : wrap_3 ? 4'h6 : state},
     {clockFall ? 4'h3 : wrap_1 ? 4'h6 : state},
     {wrap ? 4'h2 : state},
     {_GEN_0 ? 4'h7 : _GEN_11 ? 4'h1 : state}};	// ps2/src/ps2/ps2.scala:67:22, :84:19, :102:38, :103:37, :105:17, :108:{22,41}, :111:15, :112:34, :115:28, :118:18, :119:17, :128:32, :130:15, :142:23, :143:15, :146:37, :148:15, :157:23, :158:33, :159:17, :161:36, :163:15, :169:23, :170:15, :175:23, :177:15, :182:13, :187:23, :189:33, :190:17, :196:23, :197:15, :207:13, src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  always @(posedge clock) begin	// ps2/src/ps2/ps2.scala:44:7
    if (reset) begin	// ps2/src/ps2/ps2.scala:44:7
      state <= 4'h0;	// ps2/src/ps2/ps2.scala:67:22, src/main/scala/chisel3/util/Counter.scala:61:40
      counter100us_value <= 13'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      counter15ms_value <= 20'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      counter2ms_value <= 17'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      counterSend_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      counterRecv_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      lastClockSamples <= 3'h7;	// ps2/src/ps2/ps2.scala:91:33
      lastClock <= 1'h1;	// ps2/src/ps2/ps2.scala:72:18, :96:26
    end
    else begin	// ps2/src/ps2/ps2.scala:44:7
      state <= _GEN_14[state];	// ps2/src/ps2/ps2.scala:67:22, :105:17, :108:41, :128:32, :142:23, :157:23, :169:23, :175:23, :182:13, :187:23, :196:23, :207:13
      if (_GEN) begin	// ps2/src/ps2/ps2.scala:105:17
        if (_GEN_0 | ~_GEN_11) begin	// ps2/src/ps2/ps2.scala:84:19, :108:{22,41}, :112:34, :115:28, :118:18, src/main/scala/chisel3/util/Counter.scala:61:40
        end
        else	// ps2/src/ps2/ps2.scala:108:41, :112:34, src/main/scala/chisel3/util/Counter.scala:61:40
          counter100us_value <= 13'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        if (_GEN_0)	// ps2/src/ps2/ps2.scala:108:22
          counterRecv_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      end
      else begin	// ps2/src/ps2/ps2.scala:105:17
        if (_GEN_1) begin	// ps2/src/ps2/ps2.scala:105:17
          if (wrap) begin	// src/main/scala/chisel3/util/Counter.scala:73:24
            counter100us_value <= 13'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
            counter15ms_value <= 20'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
          end
          else	// src/main/scala/chisel3/util/Counter.scala:73:24
            counter100us_value <= counter100us_value + 13'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
        end
        else if (~_GEN_2 | clockFall) begin	// ps2/src/ps2/ps2.scala:103:37, :105:17, :142:23, src/main/scala/chisel3/util/Counter.scala:61:40
        end
        else if (wrap_1)	// src/main/scala/chisel3/util/Counter.scala:73:24
          counter15ms_value <= 20'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          counter15ms_value <= counter15ms_value + 20'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
        if (_GEN_13 | ~_GEN_12) begin	// ps2/src/ps2/ps2.scala:87:20, :105:17, :187:23, :188:17, src/main/scala/chisel3/util/Counter.scala:61:40
        end
        else if (wrap_4)	// src/main/scala/chisel3/util/Counter.scala:73:24
          counterRecv_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          counterRecv_value <= counterRecv_value + 4'h1;	// ps2/src/ps2/ps2.scala:119:17, src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (~_GEN_4) begin	// ps2/src/ps2/ps2.scala:74:17, :105:17
        if (_GEN_2) begin	// ps2/src/ps2/ps2.scala:105:17
          if (clockFall) begin	// ps2/src/ps2/ps2.scala:103:37
            counter2ms_value <= 17'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
            counterSend_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
          end
        end
        else begin	// ps2/src/ps2/ps2.scala:105:17
          if (~_GEN_3 | clockFall) begin	// ps2/src/ps2/ps2.scala:103:37, :105:17, :157:23, src/main/scala/chisel3/util/Counter.scala:61:40
          end
          else if (wrap_3)	// src/main/scala/chisel3/util/Counter.scala:73:24
            counter2ms_value <= 17'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
          else	// src/main/scala/chisel3/util/Counter.scala:73:24
            counter2ms_value <= counter2ms_value + 17'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
          if (_GEN_3 & clockFall) begin	// ps2/src/ps2/ps2.scala:103:37, :105:17, :157:23, src/main/scala/chisel3/util/Counter.scala:61:40, :87:20
            if (wrap_2)	// src/main/scala/chisel3/util/Counter.scala:73:24
              counterSend_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
            else	// src/main/scala/chisel3/util/Counter.scala:73:24
              counterSend_value <= counterSend_value + 4'h1;	// ps2/src/ps2/ps2.scala:119:17, src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
          end
        end
      end
      lastClockSamples <= {lastClockSamples[1:0], io_ps2_clock_i};	// ps2/src/ps2/ps2.scala:91:33, :92:{26,43}
      lastClock <= (&lastClockSamples) | ~clockLow & lastClock;	// ps2/src/ps2/ps2.scala:91:33, :93:62, :94:64, :96:26, :97:19, :98:15, :99:24, :100:15
    end
    if (~_GEN | _GEN_0 | ~_GEN_11) begin	// ps2/src/ps2/ps2.scala:84:19, :105:17, :108:{22,41}, :112:34, :115:28, :118:18
    end
    else	// ps2/src/ps2/ps2.scala:84:19, :105:17, :108:41
      curReq <= {~(^io_req_bits), io_req_bits};	// ps2/src/ps2/ps2.scala:84:19, :118:{24,54,59}
    if (_GEN | _GEN_13 | ~_GEN_12) begin	// ps2/src/ps2/ps2.scala:87:20, :105:17, :187:23, :188:17
    end
    else	// ps2/src/ps2/ps2.scala:87:20, :105:17
      curResp <=
        io_ps2_data_i ? curResp | _curResp_T[8:0] : ~(~curResp | _curResp_T[8:0]);	// ps2/src/ps2/ps2.scala:87:20, :188:34
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ps2/src/ps2/ps2.scala:44:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ps2/src/ps2/ps2.scala:44:7
      `FIRRTL_BEFORE_INITIAL	// ps2/src/ps2/ps2.scala:44:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];	// ps2/src/ps2/ps2.scala:44:7
    initial begin	// ps2/src/ps2/ps2.scala:44:7
      `ifdef INIT_RANDOM_PROLOG_	// ps2/src/ps2/ps2.scala:44:7
        `INIT_RANDOM_PROLOG_	// ps2/src/ps2/ps2.scala:44:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ps2/src/ps2/ps2.scala:44:7
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// ps2/src/ps2/ps2.scala:44:7
        end	// ps2/src/ps2/ps2.scala:44:7
        state = _RANDOM[2'h0][3:0];	// ps2/src/ps2/ps2.scala:44:7, :67:22
        counter100us_value = _RANDOM[2'h0][16:4];	// ps2/src/ps2/ps2.scala:44:7, :67:22, src/main/scala/chisel3/util/Counter.scala:61:40
        counter15ms_value = {_RANDOM[2'h0][31:17], _RANDOM[2'h1][4:0]};	// ps2/src/ps2/ps2.scala:44:7, :67:22, src/main/scala/chisel3/util/Counter.scala:61:40
        counter2ms_value = _RANDOM[2'h1][21:5];	// ps2/src/ps2/ps2.scala:44:7, src/main/scala/chisel3/util/Counter.scala:61:40
        curReq = _RANDOM[2'h1][30:22];	// ps2/src/ps2/ps2.scala:44:7, :84:19, src/main/scala/chisel3/util/Counter.scala:61:40
        counterSend_value = {_RANDOM[2'h1][31], _RANDOM[2'h2][2:0]};	// ps2/src/ps2/ps2.scala:44:7, src/main/scala/chisel3/util/Counter.scala:61:40
        curResp = _RANDOM[2'h2][11:3];	// ps2/src/ps2/ps2.scala:44:7, :87:20, src/main/scala/chisel3/util/Counter.scala:61:40
        counterRecv_value = _RANDOM[2'h2][15:12];	// ps2/src/ps2/ps2.scala:44:7, src/main/scala/chisel3/util/Counter.scala:61:40
        lastClockSamples = _RANDOM[2'h2][18:16];	// ps2/src/ps2/ps2.scala:44:7, :91:33, src/main/scala/chisel3/util/Counter.scala:61:40
        lastClock = _RANDOM[2'h2][19];	// ps2/src/ps2/ps2.scala:44:7, :96:26, src/main/scala/chisel3/util/Counter.scala:61:40
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ps2/src/ps2/ps2.scala:44:7
      `FIRRTL_AFTER_INITIAL	// ps2/src/ps2/ps2.scala:44:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue16_UInt8 respQueue (	// ps2/src/ps2/ps2.scala:64:25
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (~_GEN_10 & _GEN_9 & ^curResp),	// ps2/src/ps2/ps2.scala:87:20, :105:17, :203:44, src/main/scala/chisel3/util/Decoupled.scala:67:20
    .io_enq_bits  (curResp[7:0]),	// ps2/src/ps2/ps2.scala:87:20, :205:39
    .io_deq_ready (io_resp_ready),
    .io_deq_valid (io_resp_valid),
    .io_deq_bits  (io_resp_bits)
  );
  assign io_ps2_clock_o = 1'h0;	// ps2/src/ps2/ps2.scala:44:7, :67:22
  assign io_ps2_clock_t = _GEN | ~_GEN_1;	// ps2/src/ps2/ps2.scala:44:7, :67:22, :72:18, :105:17, :126:22
  assign io_ps2_data_o = ~(_GEN | _GEN_1 | _GEN_2) & _GEN_3 & _io_ps2_data_o_T[0];	// ps2/src/ps2/ps2.scala:44:7, :73:17, :105:17, :138:21, :153:30
  assign io_ps2_data_t = _GEN_4 | ~_GEN_2 & ~_GEN_3;	// ps2/src/ps2/ps2.scala:44:7, :67:22, :72:18, :74:17, :105:17, :137:21, :142:23, :152:21, src/main/scala/chisel3/util/Counter.scala:61:40
  assign io_req_ready = _GEN & ~_GEN_0 & io_ps2_clock_i;	// ps2/src/ps2/ps2.scala:44:7, :75:16, :105:17, :108:{22,41}, :112:34
  assign io_req_error = ~(_GEN | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_5 | _GEN_6) & _GEN_7;	// ps2/src/ps2/ps2.scala:44:7, :76:16, :105:17
  assign io_resp_error = ~_GEN_10 & _GEN_9 & ~(^curResp);	// ps2/src/ps2/ps2.scala:44:7, :77:17, :87:20, :105:17, :203:44, :206:24, src/main/scala/chisel3/util/Decoupled.scala:67:20
endmodule

